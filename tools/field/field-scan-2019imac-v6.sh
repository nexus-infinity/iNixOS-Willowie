#!/usr/bin/env bash
set -euo pipefail

# --- Utility functions ---

die() { echo "ERROR: $*" >&2; exit 1; }
warn() { echo "WARNING: $*" >&2; }
require_var() { [ -n "${!1:-}" ] || die "Required variable '$1' is not set."; }
require_file() { [ -e "$1" ] || die "Required file '$1' does not exist."; }
sanitize_for_sed() { echo "$1" | tr -d '\n' | sed -e 's/[&|]/\\&/g'; }
safe_sed() {
  local placeholder="$1" value file
  value=$(sanitize_for_sed "$2")
  file="$3"
  grep -q "$placeholder" "$file" || warn "$placeholder not found in $file"
  sed -i "s|$placeholder|$value|g" "$file"
}
insert_file_or_warn() {
  local marker="$1" file="$2" target="$3"
  if [ -s "$file" ]; then
    sed -i "/$marker/r $file" "$target"
    sed -i "s|$marker||g" "$target"
  else
    warn "$file missing, $marker left in $target"
  fi
}

# --- Initialization ---

SCAN_BASE="/var/log"
TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
SCAN_DIR="${SCAN_BASE}/FIELD-Scan-${TIMESTAMP}"
RAW_DIR="${SCAN_DIR}/raw"

mkdir -p "${RAW_DIR}"

echo "=== FIELD Scanner v5 ==="
echo "Scan directory: ${SCAN_DIR}"
echo "Timestamp: ${TIMESTAMP}"

# --- Data Collection ---

collect() {
  local cmd="$1" out="$2"
  echo "  Collecting: $cmd"
  ($cmd > "${RAW_DIR}/$out.txt" 2>&1) || warn "$cmd failed"
}

echo "Collecting system information..."
collect "hostname" "hostname"
collect "uname -a" "uname"
collect "nixos-version" "nixos-version"
collect "nix-info" "nix-info"

echo "Collecting CPU information..."
collect "cat /proc/cpuinfo" "cpuinfo"
collect "lscpu" "lscpu"

echo "Collecting memory information..."
collect "cat /proc/meminfo" "meminfo"
collect "free -h" "free"

echo "Collecting GPU information..."
collect "lspci | grep VGA" "lspci-vga"
collect "lspci -vv" "lspci-full"
collect "ls /dev/dri" "drm-devices"

echo "Collecting storage information..."
collect "lsblk" "lsblk"
collect "lsblk -J" "lsblk-json"
collect "blkid" "blkid"
collect "df -h" "df"
collect "mount" "mount"
collect "btrfs subvolume list /" "btrfs-subvol-list"
collect "btrfs fi show" "btrfs-fi-show"

echo "Collecting USB device information..."
collect "lsusb" "lsusb"
collect "cat /proc/bus/usb/devices" "usb-devices"

echo "Collecting PCI device information..."
collect "lspci -t" "lspci-tree"

echo "Collecting network information..."
collect "ip addr" "ip-addr"
collect "ip link" "ip-link"
collect "ip route" "ip-route"
collect "nmcli device" "nmcli-device"
collect "nmcli connection" "nmcli-connection"

echo "Collecting wireless information..."
collect "iw dev" "iw-dev"
collect "rfkill list" "rfkill"

echo "Collecting Bluetooth information..."
collect "bluetoothctl devices" "bluetoothctl"
collect "hciconfig -a" "hciconfig"

echo "Collecting Thunderbolt information..."
collect "boltctl" "boltctl"

echo "Collecting audio information..."
collect "aplay -l" "aplay-list"
collect "pactl list sinks" "pactl-sinks"
collect "pactl list sources" "pactl-sources"

echo "Collecting camera/video information..."
collect "ls /dev/video*" "v4l2-devices"

echo "Collecting EFI/boot information..."
collect "efibootmgr" "efibootmgr"
collect "bootctl status" "bootctl-status"
collect "ls /boot/efi" "ls-boot-efi"

echo "Collecting user information..."
collect "cat /etc/passwd" "users"
collect "cat /etc/group" "groups"
collect "whoami" "current-user"

echo "Collecting NixOS configuration..."
collect "cat /etc/nixos/hardware-configuration.nix" "nixos-hardware-config"
collect "cat /etc/nixos/configuration.nix" "nixos-configuration"
collect "cat /etc/nixos/flake.nix" "nixos-flake"
collect "nix-channel --list" "nix-channels"

echo "Collecting service information..."
collect "systemctl --no-pager status" "systemctl-status"
collect "systemctl --failed" "systemctl-failed"

echo "Collecting kernel information..."
collect "lsmod" "lsmod"
collect "dmesg" "dmesg"

echo "Analyzing filesystems..."
collect "findmnt" "findmnt"
collect "findmnt -J" "findmnt-json"

# --- Generate Reports ---

echo "=== Generating Reports ==="
echo "Generating JSON report..."
jq -Rs '{scan_raw: .}' < <(cat ${RAW_DIR}/*.txt) > "${SCAN_DIR}/report.json" || warn "JSON report failed"

echo "Generating Markdown report..."

MD_REPORT="${SCAN_DIR}/report.md"
cat > "$MD_REPORT" <<'EOF'
# FIELD Scan Report

**Hostname:** HOSTNAME_PLACEHOLDER  
**NixOS Version:** NIXOS_VERSION_PLACEHOLDER  
**Timestamp:** TIMESTAMP_PLACEHOLDER

## System Overview

### Hardware Configuration

CONFIG_EXCERPT_PLACEHOLDER

---

## Analysis and Friction Detection

### Duplicate Filesystem Checks

DUPLICATE_FS_PLACEHOLDER

### Transient Device Checks

TRANSIENT_DEV_PLACEHOLDER

### Boot Loader Duplicates

BOOT_DUP_PLACEHOLDER

---

## Raw Data

All raw command outputs are available in:  
RAW_DIR_PLACEHOLDER

---

**Scan completed:** TIMESTAMP_PLACEHOLDER  
**Generated by:** field-scan-2019imac-v5.sh
EOF

# --- Sanitize and substitute variables ---

require_var SCAN_DIR
require_var RAW_DIR
require_var TIMESTAMP
require_file "$MD_REPORT"

TIMESTAMP_SAFE=$(sanitize_for_sed "$TIMESTAMP")
HOSTNAME_SAFE=$(sanitize_for_sed "$(hostname)")
NIXOS_VERSION_SAFE=$(sanitize_for_sed "$(nixos-version 2>/dev/null || echo 'unknown')")
RAW_DIR_SAFE=$(sanitize_for_sed "$RAW_DIR")

safe_sed "TIMESTAMP_PLACEHOLDER" "$TIMESTAMP_SAFE" "$MD_REPORT"
safe_sed "HOSTNAME_PLACEHOLDER" "$HOSTNAME_SAFE" "$MD_REPORT"
safe_sed "NIXOS_VERSION_PLACEHOLDER" "$NIXOS_VERSION_SAFE" "$MD_REPORT"
safe_sed "RAW_DIR_PLACEHOLDER" "$RAW_DIR_SAFE" "$MD_REPORT"

# --- Insert excerpts and analysis placeholders safely ---

insert_file_or_warn "CONFIG_EXCERPT_PLACEHOLDER" "${RAW_DIR}/nixos-hardware-config.txt" "$MD_REPORT"
insert_file_or_warn "DUPLICATE_FS_PLACEHOLDER" "${RAW_DIR}/findmnt.txt" "$MD_REPORT"
insert_file_or_warn "TRANSIENT_DEV_PLACEHOLDER" "${RAW_DIR}/lsusb.txt" "$MD_REPORT"
insert_file_or_warn "BOOT_DUP_PLACEHOLDER" "${RAW_DIR}/efibootmgr.txt" "$MD_REPORT"

echo "=== Scan complete. Reports saved in ${SCAN_DIR} ==="
