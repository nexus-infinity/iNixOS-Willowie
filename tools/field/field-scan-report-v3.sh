#!/usr/bin/env bash
# field-scan-report-v3.sh - Regenerate reports from existing scan directory
set -euo pipefail

# Parse arguments
SCAN_DIR=""
OPEN_REPORT=false
SERVE_PORT=""

show_usage() {
  cat <<EOF
Usage: $0 <scan-directory> [--open] [--serve PORT]

Regenerates report.md, report.html, and report.json from an existing FIELD scan directory.

Arguments:
  scan-directory  Path to existing FIELD-Scan-* directory

Options:
  --open         Open the HTML report in default browser after generation
  --serve PORT   Start a simple HTTP server on PORT to serve the report
  -h, --help     Show this help message

Examples:
  $0 /var/log/FIELD-Scan-20250101-120000
  $0 /var/log/FIELD-Scan-20250101-120000 --open
  $0 /var/log/FIELD-Scan-20250101-120000 --serve 8080
EOF
}

# Parse command line
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_usage
      exit 0
      ;;
    --open)
      OPEN_REPORT=true
      shift
      ;;
    --serve)
      SERVE_PORT="$2"
      shift 2
      ;;
    *)
      if [ -z "$SCAN_DIR" ]; then
        SCAN_DIR="$1"
        shift
      else
        echo "Error: Unknown argument '$1'" >&2
        show_usage
        exit 1
      fi
      ;;
  esac
done

if [ -z "$SCAN_DIR" ]; then
  echo "Error: scan-directory is required" >&2
  show_usage
  exit 1
fi

# Validate scan directory
if [ ! -d "$SCAN_DIR" ]; then
  echo "Error: Directory not found: $SCAN_DIR" >&2
  exit 1
fi

RAW_DIR="${SCAN_DIR}/raw"
if [ ! -d "$RAW_DIR" ]; then
  echo "Error: Not a valid FIELD scan directory (missing raw/ subdirectory)" >&2
  exit 1
fi

echo "=== FIELD Report Generator v3 ==="
echo "Scan directory: $SCAN_DIR"

# Extract timestamp from directory name or use current
TIMESTAMP=$(basename "$SCAN_DIR" | sed 's/FIELD-Scan-//' || date +%Y%m%d-%H%M%S)

# Get hostname from raw data or current system
HOSTNAME=$(cat "${RAW_DIR}/hostname.txt" 2>/dev/null || hostname)

# Get NixOS version
NIXOS_VERSION=$(grep -v "^$" "${RAW_DIR}/nixos-version.txt" 2>/dev/null | head -1 || echo "unknown")

# Generate JSON report
echo "Generating JSON report..."
cat > "${SCAN_DIR}/report.json" <<EOF
{
  "timestamp": "${TIMESTAMP}",
  "hostname": "${HOSTNAME}",
  "scan_dir": "${SCAN_DIR}",
  "system": {
    "nixos_version": "${NIXOS_VERSION}"
  },
  "raw_dir": "${RAW_DIR}"
}
EOF

# Generate Markdown report
echo "Generating Markdown report..."
cat > "${SCAN_DIR}/report.md" <<'MDEOF'
# FIELD System Scan Report

**Scan Timestamp:** TIMESTAMP_PLACEHOLDER  
**Hostname:** HOSTNAME_PLACEHOLDER  
**NixOS Version:** NIXOS_VERSION_PLACEHOLDER

---

## Executive Summary

This report provides a comprehensive inventory of the system hardware, configuration, and detected friction points.

### System Overview

- **CPU:** CPU_INFO_PLACEHOLDER
- **Memory:** MEMORY_INFO_PLACEHOLDER
- **Storage:** STORAGE_INFO_PLACEHOLDER

### Friction Detection

FRICTION_PLACEHOLDER

---

## Hardware Inventory

### CPU

```
CPU_DETAILS_PLACEHOLDER
```

### Memory

```
MEMORY_DETAILS_PLACEHOLDER
```

### GPU/Graphics

```
GPU_DETAILS_PLACEHOLDER
```

### Storage Devices

```
STORAGE_DETAILS_PLACEHOLDER
```

### Block Devices

```
LSBLK_PLACEHOLDER
```

---

## Peripherals

### USB Devices

```
USB_PLACEHOLDER
```

### Network Interfaces

```
NETWORK_PLACEHOLDER
```

### Bluetooth

```
BLUETOOTH_PLACEHOLDER
```

### Audio Devices

```
AUDIO_PLACEHOLDER
```

---

## Boot Configuration

### EFI Boot Manager

```
EFI_PLACEHOLDER
```

### Boot Loader Status

```
BOOTCTL_PLACEHOLDER
```

---

## Filesystem Mounts

```
MOUNTS_PLACEHOLDER
```

---

## NixOS Configuration

### hardware-configuration.nix

```nix
HARDWARE_CONFIG_PLACEHOLDER
```

### configuration.nix (excerpt)

```nix
CONFIG_EXCERPT_PLACEHOLDER
```

---

## Analysis and Friction Detection

### Duplicate Filesystem Checks

DUPLICATE_FS_PLACEHOLDER

### Transient Device Checks

TRANSIENT_DEV_PLACEHOLDER

### Boot Loader Duplicates

BOOT_DUP_PLACEHOLDER

---

## Raw Data

All raw command outputs are available in:  
`RAW_DIR_PLACEHOLDER`

---

**Scan completed:** TIMESTAMP_PLACEHOLDER  
**Generated by:** field-scan-report-v3.sh
MDEOF

# Fill in placeholders
sed -i "s|TIMESTAMP_PLACEHOLDER|${TIMESTAMP}|g" "${SCAN_DIR}/report.md"
sed -i "s|HOSTNAME_PLACEHOLDER|${HOSTNAME}|g" "${SCAN_DIR}/report.md"
sed -i "s|NIXOS_VERSION_PLACEHOLDER|${NIXOS_VERSION}|g" "${SCAN_DIR}/report.md"
sed -i "s|RAW_DIR_PLACEHOLDER|${RAW_DIR}|g" "${SCAN_DIR}/report.md"

# CPU info
CPU_MODEL=$(grep -m 1 "model name" "${RAW_DIR}/cpuinfo.txt" 2>/dev/null | cut -d: -f2 | xargs || echo "Unknown")
CPU_CORES=$(grep -c "^processor" "${RAW_DIR}/cpuinfo.txt" 2>/dev/null || echo "Unknown")
sed -i "s|CPU_INFO_PLACEHOLDER|${CPU_MODEL} (${CPU_CORES} cores)|g" "${SCAN_DIR}/report.md"

if [ -f "${RAW_DIR}/lscpu.txt" ]; then
  sed -i "/CPU_DETAILS_PLACEHOLDER/r ${RAW_DIR}/lscpu.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|CPU_DETAILS_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Memory info
MEMORY_TOTAL=$(grep "MemTotal" "${RAW_DIR}/meminfo.txt" 2>/dev/null | awk '{print $2, $3}' || echo "Unknown")
sed -i "s|MEMORY_INFO_PLACEHOLDER|${MEMORY_TOTAL}|g" "${SCAN_DIR}/report.md"

if [ -f "${RAW_DIR}/free.txt" ]; then
  sed -i "/MEMORY_DETAILS_PLACEHOLDER/r ${RAW_DIR}/free.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|MEMORY_DETAILS_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Storage info
STORAGE_SUMMARY=$(lsblk -ndo NAME,SIZE,TYPE 2>/dev/null | grep disk | head -3 || echo "Unknown")
sed -i "s|STORAGE_INFO_PLACEHOLDER|${STORAGE_SUMMARY}|g" "${SCAN_DIR}/report.md"

if [ -f "${RAW_DIR}/lsblk.txt" ]; then
  sed -i "/STORAGE_DETAILS_PLACEHOLDER/r ${RAW_DIR}/lsblk.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|STORAGE_DETAILS_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# GPU info
if [ -f "${RAW_DIR}/lspci-vga.txt" ]; then
  sed -i "/GPU_DETAILS_PLACEHOLDER/r ${RAW_DIR}/lspci-vga.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|GPU_DETAILS_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# LSBLK
if [ -f "${RAW_DIR}/lsblk.txt" ]; then
  sed -i "/LSBLK_PLACEHOLDER/r ${RAW_DIR}/lsblk.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|LSBLK_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# USB
if [ -f "${RAW_DIR}/lsusb.txt" ]; then
  sed -i "/USB_PLACEHOLDER/r ${RAW_DIR}/lsusb.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|USB_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Network
if [ -f "${RAW_DIR}/ip-addr.txt" ]; then
  sed -i "/NETWORK_PLACEHOLDER/r ${RAW_DIR}/ip-addr.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|NETWORK_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Bluetooth
if [ -f "${RAW_DIR}/bluetoothctl.txt" ]; then
  sed -i "/BLUETOOTH_PLACEHOLDER/r ${RAW_DIR}/bluetoothctl.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|BLUETOOTH_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Audio
if [ -f "${RAW_DIR}/aplay-list.txt" ]; then
  sed -i "/AUDIO_PLACEHOLDER/r ${RAW_DIR}/aplay-list.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|AUDIO_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# EFI
if [ -f "${RAW_DIR}/efibootmgr.txt" ]; then
  sed -i "/EFI_PLACEHOLDER/r ${RAW_DIR}/efibootmgr.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|EFI_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Bootctl
if [ -f "${RAW_DIR}/bootctl-status.txt" ]; then
  sed -i "/BOOTCTL_PLACEHOLDER/r ${RAW_DIR}/bootctl-status.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|BOOTCTL_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Mounts
if [ -f "${RAW_DIR}/mount.txt" ]; then
  sed -i "/MOUNTS_PLACEHOLDER/r ${RAW_DIR}/mount.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|MOUNTS_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Hardware config
if [ -f "${RAW_DIR}/nixos-hardware-config.txt" ]; then
  sed -i "/HARDWARE_CONFIG_PLACEHOLDER/r ${RAW_DIR}/nixos-hardware-config.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|HARDWARE_CONFIG_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Config excerpt (first 50 lines)
if [ -f "${RAW_DIR}/nixos-configuration.txt" ]; then
  head -50 "${RAW_DIR}/nixos-configuration.txt" > "${RAW_DIR}/nixos-configuration-excerpt.txt"
  sed -i "/CONFIG_EXCERPT_PLACEHOLDER/r ${RAW_DIR}/nixos-configuration-excerpt.txt" "${SCAN_DIR}/report.md"
fi
sed -i "s|CONFIG_EXCERPT_PLACEHOLDER||g" "${SCAN_DIR}/report.md"

# Friction detection
FRICTION_REPORT=""

# Check for duplicate fileSystems
if [ -f "${RAW_DIR}/nixos-hardware-config.txt" ]; then
  DUPLICATE_FS=$(grep -E "^\s*fileSystems\." "${RAW_DIR}/nixos-hardware-config.txt" | sort | uniq -d || true)
  if [ -n "$DUPLICATE_FS" ]; then
    FRICTION_REPORT="${FRICTION_REPORT}**⚠ Duplicate filesystem declarations detected**\n"
    sed -i "s|DUPLICATE_FS_PLACEHOLDER|⚠ **WARNING:** Duplicate filesystem declarations found:\n\`\`\`\n${DUPLICATE_FS}\n\`\`\`|g" "${SCAN_DIR}/report.md"
  else
    sed -i "s|DUPLICATE_FS_PLACEHOLDER|✓ No duplicate filesystem declarations|g" "${SCAN_DIR}/report.md"
  fi
else
  sed -i "s|DUPLICATE_FS_PLACEHOLDER|N/A - hardware-configuration.nix not found|g" "${SCAN_DIR}/report.md"
fi

# Check for transient devices
if [ -f "${RAW_DIR}/nixos-hardware-config.txt" ]; then
  TRANSIENT_DEV=$(grep -E "(overlay|/etc/nix|/nix/store)" "${RAW_DIR}/nixos-hardware-config.txt" || true)
  if [ -n "$TRANSIENT_DEV" ]; then
    FRICTION_REPORT="${FRICTION_REPORT}**⚠ Transient devices in configuration**\n"
    sed -i "s|TRANSIENT_DEV_PLACEHOLDER|⚠ **WARNING:** Transient devices found:\n\`\`\`\n${TRANSIENT_DEV}\n\`\`\`|g" "${SCAN_DIR}/report.md"
  else
    sed -i "s|TRANSIENT_DEV_PLACEHOLDER|✓ No transient devices detected|g" "${SCAN_DIR}/report.md"
  fi
else
  sed -i "s|TRANSIENT_DEV_PLACEHOLDER|N/A - hardware-configuration.nix not found|g" "${SCAN_DIR}/report.md"
fi

# Check for boot loader duplicates
if [ -f "${RAW_DIR}/nixos-configuration.txt" ]; then
  BOOT_DUP=$(grep -E "boot\.loader\.(systemd-boot|grub)\.enable" "${RAW_DIR}/nixos-configuration.txt" | sort | uniq -d || true)
  if [ -n "$BOOT_DUP" ]; then
    FRICTION_REPORT="${FRICTION_REPORT}**⚠ Duplicate boot loader options**\n"
    sed -i "s|BOOT_DUP_PLACEHOLDER|⚠ **WARNING:** Duplicate boot loader options:\n\`\`\`\n${BOOT_DUP}\n\`\`\`|g" "${SCAN_DIR}/report.md"
  else
    sed -i "s|BOOT_DUP_PLACEHOLDER|✓ No duplicate boot loader options|g" "${SCAN_DIR}/report.md"
  fi
else
  sed -i "s|BOOT_DUP_PLACEHOLDER|N/A - configuration.nix not found|g" "${SCAN_DIR}/report.md"
fi

if [ -z "$FRICTION_REPORT" ]; then
  FRICTION_REPORT="✓ **No friction detected** - Configuration appears clean"
fi

sed -i "s|FRICTION_PLACEHOLDER|${FRICTION_REPORT}|g" "${SCAN_DIR}/report.md"

# Generate HTML report
echo "Generating HTML report..."
if command -v markdown &>/dev/null; then
  markdown "${SCAN_DIR}/report.md" > "${SCAN_DIR}/report.html"
elif command -v pandoc &>/dev/null; then
  pandoc -f markdown -t html -s "${SCAN_DIR}/report.md" -o "${SCAN_DIR}/report.html"
else
  # Simple HTML wrapper
  cat > "${SCAN_DIR}/report.html" <<'HTMLEOF'
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>FIELD Scan Report</title>
  <style>
    body { font-family: sans-serif; max-width: 900px; margin: 40px auto; padding: 0 20px; }
    pre { background: #f5f5f5; padding: 15px; overflow-x: auto; border-radius: 5px; }
    code { background: #f5f5f5; padding: 2px 5px; border-radius: 3px; }
    h1, h2, h3 { color: #333; }
    hr { border: none; border-top: 2px solid #ddd; margin: 30px 0; }
  </style>
</head>
<body>
<pre>
HTMLEOF
  cat "${SCAN_DIR}/report.md" >> "${SCAN_DIR}/report.html"
  cat >> "${SCAN_DIR}/report.html" <<'HTMLEOF'
</pre>
</body>
</html>
HTMLEOF
fi

echo ""
echo "=== Report Generation Complete ==="
echo "  Markdown: ${SCAN_DIR}/report.md"
echo "  HTML:     ${SCAN_DIR}/report.html"
echo "  JSON:     ${SCAN_DIR}/report.json"
echo ""

# Open report if requested
if [ "$OPEN_REPORT" = true ]; then
  echo "Opening HTML report in browser..."
  if command -v xdg-open &>/dev/null; then
    xdg-open "${SCAN_DIR}/report.html" &
  elif command -v open &>/dev/null; then
    open "${SCAN_DIR}/report.html" &
  else
    echo "Warning: Could not find xdg-open or open command to open browser" >&2
  fi
fi

# Serve report if requested
if [ -n "$SERVE_PORT" ]; then
  echo "Starting HTTP server on port ${SERVE_PORT}..."
  echo "Access report at: http://localhost:${SERVE_PORT}/report.html"
  echo "Press Ctrl+C to stop server"
  cd "$SCAN_DIR"
  if command -v python3 &>/dev/null; then
    python3 -m http.server "$SERVE_PORT"
  elif command -v python &>/dev/null; then
    python -m SimpleHTTPServer "$SERVE_PORT"
  else
    echo "Error: Python not found, cannot start HTTP server" >&2
    exit 1
  fi
fi
